// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  builds        Build[]
  buildlikes    BuildLike[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Class {
  id          String  @id @default(cuid())
  name        String
  description String
  image       String
  specs       Spec[]
}

model Spec {
  id          String  @id @default(cuid())
  name        String
  description String
  classId     String
  image       String
  class       Class @relation(fields: [classId], references: [id], onDelete: Cascade)
  weapons     Weapon[]
  builds      Build[]
}

model Weapon {
  id          String  @id @default(cuid())
  name        String
  description String
  image       String
  specs       Spec[]
  buildweapons BuildWeapon[]
}

model Build {
  id          String  @id @default(cuid())
  name        String
  description String
  image       String
  specId      String
  spec        Spec @relation(fields: [specId], references: [id], onDelete: Cascade)
  user        User @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  saves       Int
  likes       BuildLike[]
  weapons     BuildWeapon[]
}

model BuildLike {
  id          String  @id @default(cuid())
  buildId     String
  userId      String
  build       Build @relation(fields: [buildId], references: [id], onDelete: Cascade)
  user        User @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model BuildWeapon {
  id          String  @id @default(cuid())
  buildId     String
  weaponId    String
  build       Build @relation(fields: [buildId], references: [id], onDelete: Cascade)
  weapon      Weapon @relation(fields: [weaponId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

